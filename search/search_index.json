{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Machine \u7684\u61a8\u4e0d\u62c9\u51e0\u5c0f\u7ad9","text":"<p>\u968f\u4fbf\u5199\u70b9\u6709\u7684\u6ca1\u7684......</p>"},{"location":"#_1","title":"\u5b66\u4e60\u7a7a\u95f4","text":"<ul> <li>\u5927\u4e8c\u4e0b\u8bfe\u7a0b</li> <li>\u5927\u4e09\u4e0a\u8bfe\u7a0b</li> <li>\u5927\u4e09\u4e0b\u8bfe\u7a0b</li> <li>ARC</li> </ul>"},{"location":"#_2","title":"\u4f60\u597d\u4e0d\u597d","text":""},{"location":"#_3","title":"\u4e8c\u7ea7\u6807\u9898","text":"<ol> <li>\u6253\u7bee\u7403</li> <li>\u8e22\u8db3\u7403</li> <li>\u4e0b\u8c61\u68cb</li> </ol> <p>```</p> <p>```</p> <p>$$    \\frac{a}{b}    $$</p> <p></p> <p>\ud83d\udcc4 PDF \u9884\u89c8</p> <p> </p>"},{"location":"about/","title":"\u6211\u662f\u8c01\uff1f","text":"<p>\u6c83\u5c14\u739b\u5851\u6599\u888b\uff01\uff01\uff01</p>"},{"location":"about/#_2","title":"\u5e05\u7167","text":""},{"location":"ASABE/ASABE_1/abstract/","title":"\u6982\u8ff0","text":"<p>\u91cd\u65b0\u8bbe\u8ba1\u57fa\u672c\u8981\u6c42</p>"},{"location":"ASABE/ASABE_1/redesign_requirement/","title":"\u91cd\u65b0\u8bbe\u8ba1\u57fa\u672c\u8981\u6c42","text":"<ol> <li>\u57fa\u4e8e\u538b\u529b\u4f20\u611f\u533a\u5206\u597d\u86cb\u574f\u86cb\u7684\u6838\u5fc3\u601d\u8def\u4e0d\u53d8</li> <li>\u5bfb\u627e\u5fc3\u5f62\u7535\u8def\u677f\u7684\u66ff\u6362\u65b9\u6848</li> <li>\u91cd\u6539\u673a\u68b0\u81c2\uff0c\u91cd\u70b9\u5728\u4e8e\u8f7b\u4fbf\u7075\u6d3b</li> <li>\u5145\u5206\u5229\u7528\u7a7a\u95f4\uff0c\u4fdd\u8bc1PCB\u677f\u7684\u5408\u7406\u5b89\u88c5\u4e0e\u6392\u653e\uff0c\u4f18\u5316\u6392\u7ebf\uff0c\u9732\u51fa\u5f00\u5173</li> <li>\u53ef\u4ee5\u5c1d\u8bd5SolidWorks\u6a21\u62df\u529b\u5b66\u4eff\u771f</li> </ol>"},{"location":"ASABE/DFH/abstract/","title":"hello","text":""},{"location":"ASABE/DFH/april_plan/","title":"\u56db\u6708\u8ba1\u5212","text":""},{"location":"ASABE/DFH/april_plan/#_2","title":"\u673a\u6784\u90e8\u5206","text":""},{"location":"ASABE/DFH/april_plan/#_3","title":"\u9996\u5468\u4efb\u52a1\uff1a","text":"<ol> <li>\u7bb1\u4f53\u5f62\u72b6\u8bbe\u8ba1\uff08\u65b9\u5f62\uff1f\u5706\u5f62\uff1f\u5f02\u5f62\uff1f\uff09</li> <li>\u6c34\u7bb1\u662f\u5426\u6709\u5fc5\u8981\u8bbe\u8ba1\u9632\u6ce2\u677f\uff08\u4e0e\u6c34\u7bb1\u4e00\u4f53 or \u5355\u72ec\u8bbe\u8ba1\u53ef\u62c6\u88c5\uff09</li> <li>\u6c34\u7bb1\u7bb1\u9876\u8bbe\u8ba1\uff08\u521d\u6b65\u65b9\u6848\u4e3a\u5361\u6263+\u94f0\u94fe\uff09</li> <li>\u7535\u78c1\u9600\u9700\u8981\u4e0e\u5426\uff08\u521d\u6b65\u610f\u89c1\u4e3a\u9700\u8981\uff09</li> <li>\u55b7\u5934\u55b7\u6c34\u8ddd\u79bb\u3001\u5f3a\u5ea6\u4ee5\u53ca\u5b89\u88c5\u4f4d\u7f6e\u786e\u5b9a</li> <li>\u5e95\u677f\u91cd\u65b0\u8bbe\u8ba1\uff0c\u4e3b\u8981\u601d\u8003\u65b9\u5411\u4e3a\u5982\u4f55\u4fdd\u8bc1\u4e0e\u7535\u673a\u8fde\u63a5\u7d27\u5bc6\uff0c\u4e0d\u51fa\u73b0\u87ba\u4e1d\u677e\u52a8\u95ee\u9898</li> </ol>"},{"location":"ASABE/DFH/april_plan/#331","title":"\u5c0f\u8f66\u8bbe\u8ba1\u6982\u7565\u56fe\uff083.31\uff09","text":""},{"location":"Essays/3_31/","title":"3\u670831\u65e5","text":"<p>\u4eca\u5929\u4e0a\u8bfe\u8def\u4e0a\u770b\u5230\u4e00\u4f4d\u9a91\u81ea\u884c\u8f66\u7684\u5927\u53d4\uff0c\u624b\u6367\u4e00\u675f\u7c89\u8272\u5305\u88c5\u7684\u9c9c\u82b1\uff0c\u4e0e\u4ed6\u7070\u6c89\u5355\u8c03\u7684\u7a7f\u7740\u5e76\u4e0d\u76f8\u642d\u3002\u6211\u5f88\u60ca\u8bb6\uff0c\u5982\u6b64\u5e74\u7eaa\u7684\u4eba\u4f3c\u4e4e\u5e76\u4e0d\u603b\u548c\u9c9c\u82b1\u8054\u7cfb\u5728\u4e00\u8d77\uff0c\u9c9c\u82b1\u5728\u6211\u5fc3\u4e2d\u6216\u8bb8\u5728\u67d0\u4e2a\u65f6\u523b\u8d77\uff0c\u5df2\u7ecf\u6210\u4e3a\u548c\u5e74\u8f7b\u4eba\u6c42\u7231\u6240\u7d27\u7d27\u7ed1\u5b9a\u7684\u4e00\u79cd\u201c\u4e13\u5c5e\u9053\u5177\u201d\u3002\u9c9c\u82b1\u548c\u8fd9\u6837\u4e00\u4f4d\u201c\u8001\u4eba\u201d\u51fa\u73b0\u5728\u4e00\u8d77\u663e\u7136\u5f15\u8d77\u4e86\u6211\u7684\u6ce8\u610f\u2014\u2014\u4e3a\u4ec0\u4e48\u4ed6\u8981\u624b\u6367\u4e00\u675f\u9c9c\u82b1\uff1f\u662f\u8981\u9001\u7ed9\u8c01\u5417\uff1f\u4eca\u5929\u662f\u4ec0\u4e48\u91cd\u8981\u65e5\u5b50\u5417\uff1f\u6211\u548c\u5927\u53d4\u7684\u76f8\u9047\u4ec5\u4ec5\u53ea\u505c\u7559\u5728\u7b49\u5f85\u7ea2\u7eff\u706f\u7684\u7247\u523b\u5c0f\u9699\uff0c\u8fd9\u4e9b\u95ee\u9898\u6216\u8bb8\u6c38\u8fdc\u4e0d\u4f1a\u5f97\u5230\u7b54\u6848\uff0c\u4f46\u8fd9\u7ed9\u4e86\u6211\u4e0d\u5c11\u542f\u53d1\u2014\u2014</p> <p>\u200b   \u4e3a\u4ec0\u4e48\u9c9c\u82b1\u8981\u4e00\u5b9a\u548c\u91cd\u8981\u7684\u4eba\u3001\u91cd\u8981\u7684\u4e8b\u3001\u91cd\u8981\u7684\u65f6\u523b\u76f8\u7ed1\u5b9a\u5462\uff1f\u5728\u81ea\u5df1\u5bb6\u4e2d\u3001\u5728\u5bdd\u5ba4\u91cc\u6bcf\u5468\u4e70\u4e00\u652f\u82b1\uff0c\u4e0d\u4e3a\u4ec0\u4e48\u4eba\u3001\u4e5f\u4e0d\u4e3a\u4ec0\u4e48\u4e8b\uff0c\u53ea\u662f\u5355\u7eaf\u4e3a\u751f\u6d3b\u589e\u6dfb\u4e00\u4efd\u9c9c\u6d3b\u7684\u6c14\u606f\uff0c\u6216\u8bb8\u4e5f\u76f8\u5f53\u4e0d\u9519\u3002\u800c\u4e8b\u5b9e\u4e0a\u8fd9\u4e5f\u5e76\u4e0d\u662f\u4e00\u9879\u6602\u8d35\u7684\u201c\u7231\u597d\u201d\uff0c\u51e0\u652f\u9c9c\u82b1\u7684\u4ef7\u683c\u591a\u6570\u5728\u5341\u4f59\u5143\uff0c\u6bcf\u4e2a\u6708\u6700\u591a\u4e5f\u4e0d\u4f1a\u8d85\u51fa\u767e\u5143\uff0c\u4e00\u767e\u5757\u94b1\u4e70\u4e00\u79cd\u72ec\u7279\u7684\u751f\u6d3b\u60c5\u8c03\uff0c\u8fd9\u6837\u7684\u201c\u4ea4\u6613\u201d\u4f3c\u4e4e\u662f\u7269\u8d85\u6240\u503c\u7684\u3002\u53e6\u5916\uff0c\u4e00\u5468\u4e00\u6b21\u7684\u9891\u7387\u4e5f\u5f88\u5408\u7406\uff0c\u4e00\u822c\u800c\u8a00\uff0c\u9c9c\u5207\u82b1\u7684\u4fdd\u9c9c\u65f6\u95f4\u57287-10\u5929\uff0c\u4e00\u5468\u7684\u65f6\u95f4\u5185\u6211\u90fd\u80fd\u770b\u5230\u5979\u6700\u9c9c\u4eae\u6d3b\u6cfc\u7684\u65f6\u523b\u3002\u8fd9\u5e76\u4e0d\u4e00\u4ef6\u96be\u4e8b\uff0c\u4f46\u4ecd\u9700\u6211\u638c\u63e1\u57fa\u672c\u7684\u7167\u6599\u9c9c\u82b1\u7684\u6280\u80fd\u3002\u4f46\u9057\u61be\u7684\u662f\uff0c\u56e0\u4e3a\u6211\u4e25\u91cd\u7684\u62d6\u5ef6\u75c7\uff0c\u8fd9\u9879\u7167\u6599\u82b1\u8349\u7684\u201c\u5b8f\u56fe\u4f1f\u5fd7\u201d\u4e0d\u77e5\u4f55\u65f6\u624d\u80fd\u5f97\u4ee5\u8df5\u884c\uff0c\u9042\u7279\u6b64\u8bb0\u4e8e\u968f\u7b14\u4ee5\u63d0\u9192\u81ea\u5df1\u3002 </p>"},{"location":"Tutorial/java/","title":"\u9762\u5411\u5bf9\u8c61","text":"<p>$$ \\frac{d}{dt} \\left( \\frac{\\partial \\mathcal{L}}{\\partial \\dot{q}_i} \\right) - \\frac{\\partial \\mathcal{L}}{\\partial q_i} = 0 \\quad (i = 1, 2, \\dots, n) $$</p>"},{"location":"Tutorial/cpp_chapter/c%2B%2B/","title":"\u91cd\u8f7d","text":""},{"location":"Tutorial/cpp_chapter/chapter1/","title":"\u865a\u51fd\u6570","text":""},{"location":"course_summary/second_year2/abstract_c2/","title":"\u5927\u4e8c\u4e0b\u5b66\u671f\u8bfe\u7a0b","text":""},{"location":"course_summary/second_year2/cl/","title":"\u6750\u6599\u529b\u5b66","text":""},{"location":"course_summary/second_year2/cl/#_2","title":"\u6750\u6599\u529b\u5b66 \u7b2c\u4e03\u7248 \u4e66\u672c\u4e60\u9898\u7b54\u6848","text":""},{"location":"course_summary/second_year2/preagr/","title":"\u7cbe\u7ec6\u519c\u4e1a","text":""},{"location":"course_summary/second_year2/preagr/#_2","title":"\u7cbe\u7ec6\u519c\u4e1a\u671f\u4e2d\u5c0f\u6d4b\u9898\u76ee\uff08\u6bcf\u5e74\u9898\u76ee\u5fae\u8c03\uff09","text":""},{"location":"course_summary/second_year2/preagr/#_3","title":"\u6d4b\u91cf\u4e24\u70b9\u8ddd\u79bb\u4ee3\u7801","text":""},{"location":"course_summary/second_year2/preagr/#python","title":"python","text":"<pre><code>import math\n\n# \u5b9a\u4e49\u5e38\u91cf\nPI = 3.14159265358979323846\na = 6378135.0  # \u8d64\u9053\u534a\u5f84\nb = 6356750.0  # \u6781\u534a\u5f84\n\n# \u5ea6\u5206\u79d2\u8f6c\u6362\u4e3a\u5f27\u5ea6\uff08\u8003\u8651\u65b9\u5411\uff09\ndef dms_to_radians(degrees, minutes, seconds, direction):\n    decimal = degrees + minutes / 60.0 + seconds / 3600.0\n    if direction in ('S', 'W'):\n        decimal = -decimal\n    return decimal * PI / 180.0\n\n# \u8ba1\u7b97 Kx \u7cfb\u6570\ndef calculate_Kx(lat0_rad):\n    e_sq = 1 - (b * b) / (a * a)  # e\u00b2\n    denom = math.sqrt(1 - e_sq * math.sin(lat0_rad) ** 2)\n    return (a * math.cos(lat0_rad)) / denom\n\n# \u8ba1\u7b97 Ky \u7cfb\u6570\ndef calculate_Ky(lat0_rad):\n    e_sq = 1 - (b * b) / (a * a)\n    denom = (1 - e_sq * math.sin(lat0_rad) ** 2) ** 1.5\n    return (a * (1 - e_sq)) / denom\n\n# \u8f93\u5165\u7b2c\u4e00\u4e2a\u70b9\uff08\u8d77\u70b9\uff09\u7684\u7ecf\u7eac\u5ea6\nlat_input = input().split()\nlat1_degrees = float(lat_input[0])\nlat1_minutes = float(lat_input[1])\nlat1_seconds = float(lat_input[2])\nlat1_direction = lat_input[3]\n\nlon_input = input().split()\nlon1_degrees = float(lon_input[0])\nlon1_minutes = float(lon_input[1])\nlon1_seconds = float(lon_input[2])\nlon1_direction = lon_input[3]\n\n# \u8f93\u5165\u7b2c\u4e8c\u4e2a\u70b9\u7684\u7ecf\u7eac\u5ea6\nlat_input = input().split()\nlat2_degrees = float(lat_input[0])\nlat2_minutes = float(lat_input[1])\nlat2_seconds = float(lat_input[2])\nlat2_direction = lat_input[3]\n\nlon_input = input().split()\nlon2_degrees = float(lon_input[0])\nlon2_minutes = float(lon_input[1])\nlon2_seconds = float(lon_input[2])\nlon2_direction = lon_input[3]\n\n# \u8f6c\u6362\u4e3a\u5f27\u5ea6\nlat0 = dms_to_radians(lat1_degrees, lat1_minutes, lat1_seconds, lat1_direction)\nlon0 = dms_to_radians(lon1_degrees, lon1_minutes, lon1_seconds, lon1_direction)\nlat = dms_to_radians(lat2_degrees, lat2_minutes, lat2_seconds, lat2_direction)\nlon = dms_to_radians(lon2_degrees, lon2_minutes, lon2_seconds, lon2_direction)\n\n# \u8ba1\u7b97\u7cfb\u6570\nKx = calculate_Kx(lat0)\nKy = calculate_Ky(lat0)\n\n# \u8ba1\u7b97\u8ddd\u79bb\ndelta_lon = lon - lon0\ndelta_lat = lat - lat0\nX = Kx * delta_lon  # \u4e1c\u897f\u65b9\u5411\u8ddd\u79bb\nY = Ky * delta_lat  # \u5357\u5317\u65b9\u5411\u8ddd\u79bb\n\n# \u8f93\u51fa\u7ed3\u679c\nprint(f\" dongxi distance is {abs(X):.1f}m \")\nprint(f\" nanbei distance is {abs(Y):.1f}m \")\n</code></pre>"},{"location":"course_summary/second_year2/preagr/#c","title":"C\u8bed\u8a00","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\n#define PI 3.14159265358979323846\n#define a 6378135.0         // \u74a7\u3089\u4ebe\u9357\u5a42\u7dde\n#define b 6356750.0         // \u93cb\u4f78\u5d10\u5bf0?\n\n// \u6434\ufe40\u578e\u7ec9\u6394\u7ca8\u93cb\u52ea\u7d8b\ntypedef struct {\n    int degrees;\n    int minutes;\n    double seconds;\n    char direction; // 'N', 'S', 'E', 'W'\n} DMS;\n\n// \u704f\u55d7\u5bb3\u9352\u55d9\ue757\u675e\ue101\u5d32\u6d93\u54c4\u59ec\u6434\ufe3c\u7d19\u9470\u51ad\u6abb\u93c2\u7470\u609c\u951b?\ndouble dms_to_radians(DMS dms) {\n    double decimal = dms.degrees + dms.minutes/60.0 + dms.seconds/3600.0;\n    if (dms.direction == 'S' || dms.direction == 'W') {\n        decimal = -decimal;\n    }\n    return decimal * PI / 180.0;\n}\n\n// \u7481\uff04\u757bKx\u7eef\u7ed8\u669f\ndouble calculate_Kx(double lat0_rad) {\n    double e_sq = 1 - (b*b)/(a*a); // e\u864f\n    double denom = sqrt(1 - e_sq * pow(sin(lat0_rad), 2));\n    return (a * cos(lat0_rad)) / denom;\n}\n\n// \u7481\uff04\u757bKy\u7eef\u7ed8\u669f\ndouble calculate_Ky(double lat0_rad) {\n    double e_sq = 1 - (b*b)/(a*a);\n    double denom = pow(1 - e_sq * pow(sin(lat0_rad), 2), 1.5);\n    return (a * (1 - e_sq)) / denom;\n}\n\nint main() {\n    DMS lat1, lon1, lat2, lon2;\n\n```c\n// \u6748\u64b3\u53c6\u7ed7\ue0ff\u7af4\u6d93\ue046\u5063\u951b\u5823\u6363\u9410\u7678\u7d1a\u9428\u52ed\u7ca1\u7efe\ue100\u5bb3\nscanf(\"%d %d %lf %c\", &amp;lat1.degrees, &amp;lat1.minutes, &amp;lat1.seconds, &amp;lat1.direction);\nscanf(\"%d %d %lf %c\", &amp;lon1.degrees, &amp;lon1.minutes, &amp;lon1.seconds, &amp;lon1.direction);\n\n// \u6748\u64b3\u53c6\u7ed7\ue0ff\u7c29\u6d93\ue046\u5063\u9428\u52ed\u7ca1\u7efe\ue100\u5bb3\nscanf(\"%d %d %lf %c\", &amp;lat2.degrees, &amp;lat2.minutes, &amp;lat2.seconds, &amp;lat2.direction);\nscanf(\"%d %d %lf %c\", &amp;lon2.degrees, &amp;lon2.minutes, &amp;lon2.seconds, &amp;lon2.direction);\n\n// \u675e\ue101\u5d32\u6d93\u54c4\u59ec\u6434?\ndouble lat0 = dms_to_radians(lat1);\ndouble lon0 = dms_to_radians(lon1);\ndouble lat = dms_to_radians(lat2);\ndouble lon = dms_to_radians(lon2);\n\n// \u7481\uff04\u757b\u7eef\u7ed8\u669f\ndouble Kx = calculate_Kx(lat0);\ndouble Ky = calculate_Ky(lat0);\n\n// \u7481\uff04\u757b\u74ba\u6fc8\ue787\ndouble delta_lon = lon - lon0;\ndouble delta_lat = lat - lat0;\ndouble X = Kx * delta_lon;  // \u6d93\u6ec6\u30bf\u93c2\u7470\u609c\u74ba\u6fc8\ue787\ndouble Y = Ky * delta_lat;  // \u9357\u6940\u5bf3\u93c2\u7470\u609c\u74ba\u6fc8\ue787\n\n// \u6748\u64b3\u56ad\u7f01\u64b4\u7049\nprintf(\" dongxi distance is %.3f \\n\", fabs(X));\nprintf(\" nanbei distance is %.3f \\n\", fabs(Y));\n\nreturn 0;\n```\n\n}\n</code></pre>"},{"location":"course_summary/second_year2/preagr/#coords","title":"coords","text":"<pre><code>import numpy as np\nfrom geopy.distance import geodesic\n\n# WGS-84 \u692d\u7403\u53c2\u6570\na = 6378137  # \u957f\u534a\u8f74 (m)\nb = 6356752  # \u77ed\u534a\u8f74 (m)\ne = np.sqrt(1 - (b / a) ** 2)  # \u504f\u5fc3\u7387\n\ndef N(a, e, lat):\n    \"\"\"\u8ba1\u7b97\u536f\u9149\u5708\u534a\u5f84\"\"\"\n    return a / np.sqrt(1 - e**2 * np.sin(lat)**2)\n\ndef GCS_to_ECEF(lat, lon, h=0):\n    \"\"\"\u5927\u5730\u5750\u6807\u7cfb (WGS-84) \u8f6c\u6362\u4e3a ECEF \u76f4\u89d2\u5750\u6807\"\"\"\n    lat = np.radians(lat)\n    lon = np.radians(lon)\n    N_val = N(a, e, lat)\n\n    X = (N_val + h) * np.cos(lat) * np.cos(lon)\n    Y = (N_val + h) * np.cos(lat) * np.sin(lon)\n    Z = ((1 - e**2) * N_val + h) * np.sin(lat)\n\n    return np.array([X, Y, Z])\n\ndef ECEF_to_NED(X, Y, Z, X0, Y0, Z0, lat0, lon0):\n    \"\"\"ECEF \u8f6c\u6362\u4e3a NED (\u5c40\u90e8\u4e1c\u5317\u5750\u6807)\"\"\"\n    dX = X - X0\n    dY = Y - Y0\n    dZ = Z - Z0\n\n    lat0 = np.radians(lat0)\n    lon0 = np.radians(lon0)\n\n    # \u8ba1\u7b97\u65cb\u8f6c\u77e9\u9635\n    R = np.array([\n        [-np.sin(lat0) * np.cos(lon0), -np.sin(lat0) * np.sin(lon0), np.cos(lat0)],\n        [-np.sin(lon0), np.cos(lon0), 0],\n        [-np.cos(lat0) * np.cos(lon0), -np.cos(lat0) * np.sin(lon0), -np.sin(lat0)]\n    ])\n\n    ned = R @ np.array([dX, dY, dZ])\n    return ned  # \u8fd4\u56de (North, East, Down)\n\ndef calculate_CEP_RMS_2DRMS(errors):\n    \"\"\"\u8ba1\u7b97 CEP, RMS, 2DRMS \"\"\"\n    mu = np.mean(errors)\n    sigma = np.std(errors)\n    CEP = mu + 0.68 * sigma\n    RMS = mu + sigma\n    TwoDRMS = mu + 2 * sigma\n    return mu, sigma, CEP, RMS, TwoDRMS\n\ndef convert_to_decimal(value_str, direction):\n    \"\"\"\u652f\u6301\u4e24\u79cd\u8f93\u5165\u683c\u5f0f\u7684\u8f6c\u6362\uff1a\u5ea6\u5206\u79d2\u548c\u5341\u8fdb\u5236\"\"\"\n    if not value_str or not direction:\n        return None\n\n    # \u68c0\u67e5\u6570\u503c\u5408\u6cd5\u6027\uff08\u4e0d\u5141\u8bb8\u5e26\u7b26\u53f7\uff09\n    if value_str.startswith(('-', '+')):\n        return None\n\n    try:\n        # \u683c\u5f0f1\uff1a\u5ea6\u5206\u79d2\uff08\u901a\u8fc7\u7a7a\u683c\u5206\u9694\u5224\u65ad\uff09\n        if ' ' in value_str:\n            parts = value_str.split()\n            if len(parts) != 3:\n                return None\n            degrees = float(parts[0])\n            minutes = float(parts[1])\n            seconds = float(parts[2])\n            decimal = degrees + minutes/60 + seconds/3600\n\n        # \u683c\u5f0f2\uff1a\u5341\u8fdb\u5236\uff08\u76f4\u63a5\u6d6e\u70b9\u6570\uff09\n        else:\n            decimal = float(value_str)\n\n        # \u5904\u7406\u65b9\u5411\n        if direction in ['S', 'W']:\n            decimal *= -1\n\n        return round(decimal, 8)\n\n    except ValueError:\n        return None\n\ndef input_coordinates(group_name):\n    \"\"\"\u8f93\u5165\u4e00\u7ec4\u5750\u6807\u70b9\uff0c\u652f\u6301\u4e24\u79cd\u683c\u5f0f\"\"\"\n    count = int(input(f\"\\n\u8bf7\u8f93\u5165 {group_name} \u7684\u5750\u6807\u70b9\u6570\u91cf (\u8f93\u51650\u8df3\u8fc7): \"))\n    if count &lt;= 0:\n        return None\n\n    coords = []\n    for i in range(count):\n        while True:\n            data = input(\n                f\"\u8bf7\u8f93\u5165 {group_name} \u5750\u6807\u70b9{i+1} [\u683c\u5f0f: \u7eac\u5ea6\u503c,\u7eac\u5ea6\u65b9\u5411(N/S),\u7ecf\u5ea6\u503c,\u7ecf\u5ea6\u65b9\u5411(E/W)]\\n\"\n                \"\u793a\u4f8b\uff08\u4e24\u79cd\u683c\u5f0f\uff09:\\n\"\n                \"\u5ea6\u5206\u79d2 \u2192 40 3 50.832,N,116 14 25.652,E\\n\"\n                \"\u5341\u8fdb\u5236 \u2192 40.06402,N,116.24046,E\\n\"\n                \"\u2192 \"\n            )\n            parts = data.split(',')\n            if len(parts) == 4:\n                lat_value, lat_dir, lon_value, lon_dir = parts\n                # \u9a8c\u8bc1\u65b9\u5411\n                if lat_dir not in ['N', 'S'] or lon_dir not in ['E', 'W']:\n                    print(\"! \u65b9\u5411\u9519\u8bef\uff1a\u7eac\u5ea6\u9700\u4e3a N/S\uff0c\u7ecf\u5ea6\u9700\u4e3a E/W\")\n                    continue\n                # \u8f6c\u6362\u5750\u6807\n                lat = convert_to_decimal(lat_value.strip(), lat_dir)\n                lon = convert_to_decimal(lon_value.strip(), lon_dir)\n                if lat is not None and lon is not None:\n                    coords.append([lat, lon])\n                    break\n            print(\"! \u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u6309\u793a\u4f8b\u683c\u5f0f\u91cd\u65b0\u8f93\u5165\")\n\n    return np.array(coords)\n\ndef input_reference_point():\n    \"\"\"\u8f93\u5165\u57fa\u51c6\u70b9\u5750\u6807\"\"\"\n    while True:\n        data = input(\n            \"\u8bf7\u8f93\u5165\u57fa\u51c6\u70b9\u5750\u6807 [\u683c\u5f0f: \u7eac\u5ea6\u503c,\u7eac\u5ea6\u65b9\u5411(N/S),\u7ecf\u5ea6\u503c,\u7ecf\u5ea6\u65b9\u5411(E/W)]\\n\"\n            \"\u793a\u4f8b\uff08\u4e24\u79cd\u683c\u5f0f\uff09:\\n\"\n            \"\u5ea6\u5206\u79d2 \u2192 40 3 50.832,N,116 14 25.652,E\\n\"\n            \"\u5341\u8fdb\u5236 \u2192 40.06402,N,116.24046,E\\n\"\n            \"\u2192 \"\n        )\n        parts = data.split(',')\n        if len(parts) == 4:\n            lat_value, lat_dir, lon_value, lon_dir = parts\n            # \u9a8c\u8bc1\u65b9\u5411\n            if lat_dir not in ['N', 'S'] or lon_dir not in ['E', 'W']:\n                print(\"! \u65b9\u5411\u9519\u8bef\uff1a\u7eac\u5ea6\u9700\u4e3a N/S\uff0c\u7ecf\u5ea6\u9700\u4e3a E/W\")\n                continue\n            # \u8f6c\u6362\u5750\u6807\n            lat = convert_to_decimal(lat_value.strip(), lat_dir)\n            lon = convert_to_decimal(lon_value.strip(), lon_dir)\n            if lat is not None and lon is not None:\n                return np.array([lat, lon])\n        print(\"! \u683c\u5f0f\u9519\u8bef\uff0c\u8bf7\u6309\u793a\u4f8b\u683c\u5f0f\u91cd\u65b0\u8f93\u5165\")\n\ndef main():\n    print(\"===== GPS\u5750\u6807\u8f6c\u6362\u4e0e\u8bef\u5dee\u5206\u6790\uff08\u652f\u6301\u5ea6\u5206\u79d2/\u5ea6\u5206/\u5341\u8fdb\u5236\u8f93\u5165\uff09 =====\")\n    print(\"\u8f93\u5165\u8bf4\u660e\uff1a\")\n    print(\"- \u7eac\u5ea6\u65b9\u5411\u5fc5\u987b\u4e3a N/S\uff0c\u7ecf\u5ea6\u65b9\u5411\u5fc5\u987b\u4e3a E/W\")\n    print(\"- \u6570\u503c\u90e8\u5206\u7981\u6b62\u5e26\u6b63\u8d1f\u53f7\uff0c\u6b63\u8d1f\u7531\u65b9\u5411\u51b3\u5b9a\\n\")\n\n    # \u9009\u62e9\u6a21\u5f0f\n    while True:\n        mode = input(\"\u8bf7\u9009\u62e9\u6a21\u5f0f\uff1a\\n1. \u666e\u901a\u70b9\u5750\u6807\u6a21\u5f0f\uff08\u8ba1\u7b97\u5747\u503c\u4f5c\u4e3a\u57fa\u51c6\uff09\\n2. \u57fa\u51c6\u70b9\u6a21\u5f0f\uff08\u76f4\u63a5\u8f93\u5165\u57fa\u51c6\u70b9\uff09\\n\u2192 \")\n        if mode in ['1', '2']:\n            break\n        print(\"! \u8bf7\u8f93\u5165 1 \u6216 2\")\n\n    if mode == '1':\n        # \u539f\u6709\u7684\u666e\u901a\u70b9\u5750\u6807\u6a21\u5f0f\n        coords_start = input_coordinates(\"\u8d77\u70b9\")\n        coords_end = input_coordinates(\"\u7ec8\u70b9\")\n\n        # \u5904\u7406\u8d77\u70b9\u5750\u6807\n        if coords_start is not None:\n            mean_lat_start, mean_lon_start = np.mean(coords_start, axis=0)\n            X_start, Y_start, Z_start = GCS_to_ECEF(mean_lat_start, mean_lon_start)\n\n            print(\"\\n=== \u8d77\u70b9\u5750\u6807\u4fe1\u606f ===\")\n            print(f\"\u5747\u503c\u5750\u6807 (Lat, Lon): ({mean_lat_start:.4f}, {mean_lon_start:.4f})\")\n            print(f\"ECEF \u5750\u6807 (X, Y, Z): ({X_start:.4f}, {Y_start:.4f}, {Z_start:.4f}) m\")\n\n            # \u8ba1\u7b97\u8d77\u70b9\u7ec4\u5185\u8bef\u5dee\n            if len(coords_start) &gt; 1:\n                print(\"\\n=== \u8d77\u70b9\u7ec4\u5185\u8bef\u5dee\u5206\u6790 ===\")\n                errors = []\n                for i in range(len(coords_start)):\n                    for j in range(i+1, len(coords_start)):\n                        lat1, lon1 = coords_start[i]\n                        lat2, lon2 = coords_start[j]\n                        distance = geodesic((lat1, lon1), (lat2, lon2)).meters\n                        errors.append(distance)\n\n                mu, sigma, CEP, RMS, TwoDRMS = calculate_CEP_RMS_2DRMS(errors)\n                print(f\"\u7ec4\u5185\u5e73\u5747\u8ddd\u79bb: {mu:.4f} m\")\n                print(f\"\u6807\u51c6\u5dee: {sigma:.4f} m\")\n                print(f\"CEP: {CEP:.4f} m\")\n                print(f\"RMS: {RMS:.4f} m\")\n                print(f\"2DRMS: {TwoDRMS:.4f} m\")\n\n        # \u5904\u7406\u7ec8\u70b9\u5750\u6807\n        if coords_end is not None:\n            mean_lat_end, mean_lon_end = np.mean(coords_end, axis=0)\n            X_end, Y_end, Z_end = GCS_to_ECEF(mean_lat_end, mean_lon_end)\n\n            print(\"\\n=== \u7ec8\u70b9\u5750\u6807\u4fe1\u606f ===\")\n            print(f\"\u5747\u503c\u5750\u6807 (Lat, Lon): ({mean_lat_end:.4f}, {mean_lon_end:.4f})\")\n            print(f\"ECEF \u5750\u6807 (X, Y, Z): ({X_end:.4f}, {Y_end:.4f}, {Z_end:.4f}) m\")\n\n            # \u8ba1\u7b97\u7ec8\u70b9\u7ec4\u5185\u8bef\u5dee\n            if len(coords_end) &gt; 1:\n                print(\"\\n=== \u7ec8\u70b9\u7ec4\u5185\u8bef\u5dee\u5206\u6790 ===\")\n                errors = []\n                for i in range(len(coords_end)):\n                    for j in range(i+1, len(coords_end)):\n                        lat1, lon1 = coords_end[i]\n                        lat2, lon2 = coords_end[j]\n                        distance = geodesic((lat1, lon1), (lat2, lon2)).meters\n                        errors.append(distance)\n\n                mu, sigma, CEP, RMS, TwoDRMS = calculate_CEP_RMS_2DRMS(errors)\n                print(f\"\u7ec4\u5185\u5e73\u5747\u8ddd\u79bb: {mu:.4f} m\")\n                print(f\"\u6807\u51c6\u5dee: {sigma:.4f} m\")\n                print(f\"CEP: {CEP:.4f} m\")\n                print(f\"RMS: {RMS:.4f} m\")\n                print(f\"2DRMS: {TwoDRMS:.4f} m\")\n\n        # \u5982\u679c\u4e24\u7ec4\u5750\u6807\u5747\u5b58\u5728\uff0c\u5219\u8ba1\u7b97\u76f8\u5bf9\u4fe1\u606f\n        if coords_start is not None and coords_end is not None:\n            # \u8ba1\u7b97 NED \u5750\u6807\n            N, E, D = ECEF_to_NED(X_end, Y_end, Z_end, X_start, Y_start, Z_start, mean_lat_start, mean_lon_start)\n\n            # \u8ba1\u7b97\u4e24\u79cd\u8ddd\u79bb\n            distance_NED = np.sqrt(N**2 + E**2)\n            distance_geo = geodesic((mean_lat_start, mean_lon_start), (mean_lat_end, mean_lon_end)).meters\n\n            # \u8ba1\u7b97\u8bef\u5dee\uff08\u5047\u8bbe\u771f\u5b9e\u8ddd\u79bb\u4e3a\u5730\u7406\u6d4b\u8ddd\u7ed3\u679c\uff09\n            error = abs(distance_NED - distance_geo)\n\n            # \u8ba1\u7b97\u7edf\u8ba1\u6307\u6807\uff08\u793a\u4f8b\u4e2d\u4f7f\u7528\u5355\u6b21\u8bef\u5dee\uff09\n            mu, sigma, CEP, RMS, TwoDRMS = calculate_CEP_RMS_2DRMS([error])\n\n            print(\"\\n=== \u5750\u6807\u76f8\u5bf9\u5173\u7cfb ===\")\n            print(f\"NED \u5c40\u90e8\u5750\u6807 (N, E, D): ({N:.4f}, {E:.4f}, {D:.4f}) m\")\n            print(f\"NED \u5e73\u9762\u8ddd\u79bb: {distance_NED:.4f} m\")\n            print(f\"\u5730\u7406\u6d4b\u8ddd\u7ed3\u679c: {distance_geo:.4f} m\")\n            print(f\"\u8bef\u5dee\u503c: {error:.4f} m\")\n\n            print(\"\\n=== \u8bef\u5dee\u6307\u6807 (\u57fa\u4e8e\u5355\u6b21\u6d4b\u91cf) ===\")\n            print(f\"CEP: {CEP:.4f} m\")\n            print(f\"RMS: {RMS:.4f} m\")\n            print(f\"2DRMS: {TwoDRMS:.4f} m\")\n\n    else:\n        # \u57fa\u51c6\u70b9\u6a21\u5f0f\n        print(\"\\n=== \u57fa\u51c6\u70b9\u6a21\u5f0f ===\")\n        ref_point = input_reference_point()\n        ref_lat, ref_lon = ref_point\n        X_ref, Y_ref, Z_ref = GCS_to_ECEF(ref_lat, ref_lon)\n\n        print(\"\\n=== \u57fa\u51c6\u70b9\u4fe1\u606f ===\")\n        print(f\"\u57fa\u51c6\u5750\u6807 (Lat, Lon): ({ref_lat:.4f}, {ref_lon:.4f})\")\n        print(f\"ECEF \u5750\u6807 (X, Y, Z): ({X_ref:.4f}, {Y_ref:.4f}, {Z_ref:.4f}) m\")\n\n        # \u8f93\u5165\u6d4b\u91cf\u70b9\n        coords = input_coordinates(\"\u6d4b\u91cf\u70b9\")\n        if coords is not None:\n            print(\"\\n=== \u6d4b\u91cf\u70b9\u76f8\u5bf9\u8bef\u5dee\u5206\u6790 ===\")\n            errors = []\n            for lat, lon in coords:\n                # \u8ba1\u7b97\u76f8\u5bf9\u4e8e\u57fa\u51c6\u70b9\u7684\u8ddd\u79bb\n                distance = geodesic((ref_lat, ref_lon), (lat, lon)).meters\n                errors.append(distance)\n\n            mu, sigma, CEP, RMS, TwoDRMS = calculate_CEP_RMS_2DRMS(errors)\n            print(f\"\u5e73\u5747\u8ddd\u79bb: {mu:.4f} m\")\n            print(f\"\u6807\u51c6\u5dee: {sigma:.4f} m\")\n            print(f\"CEP: {CEP:.4f} m\")\n            print(f\"RMS: {RMS:.4f} m\")\n            print(f\"2DRMS: {TwoDRMS:.4f} m\")\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"course_summary/third_year1/abstract_c3/","title":"\u5927\u4e09\u4e0a\u5b66\u671f\u8bfe\u7a0b","text":""},{"location":"course_summary/third_year2/abstract_c4/","title":"\u5927\u4e09\u4e0b\u5b66\u671f\u8bfe\u7a0b","text":""}]}